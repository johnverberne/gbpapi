swagger: '2.0'
info:
  # Some fields also need to be set in the web.xml. Swagger doesn't set these properly in the generated web.xml.
  # The fields in question: title, version and basepath.
  version: "2"
  title: Natural Capital Assessment API
  description: |
    Green and Blue in the city models 
  contact:
    name: RIVM
  license:
    name: TDB
basePath: /api/1
consumes:
  - application/json
produces:
  - application/json
paths:

  /assessmentRequest:
    post:
      operationId: postAssessmentRequest
      tags:
        - assessmentRequest
      description: |
        Excecute one or more scenarios and affiliated measures (models) with geojson input with supplied measures
      parameters:
        - name: apiKey
          in: query
          description: The API-key that can be used with other calls.
          required: true
          type: string
        - name: jobKey
          in: query
          description: The jobKey is a reference to a previouse job so it can skip extracting data files
          required: false
          type: string
        - name: measureKey
          in: query
          description: The measureKey is a reference to a uploaded measureCollection if omitted we use a default measureCollection
          required: false
          type: string
        - name: features
          in: body
          required: true
          schema:
            $ref: "#/definitions/FeatureCollection"
      responses:
        '200':
          description: |
            In case of normal behavior.
          schema:
            $ref: '#/definitions/AssessmentRequestResponse'
        '400':
          description: |
            In case of user error - thing of missing fields.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: API key is missing or invalid
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: |
            In case of system error. Please contact the helpdesk if this error persists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - apiKey: []      
      
  /generateAPIKey:
    post:
      operationId: postGenerateAPIKey
      tags:
        - user
      description: |
        Generate a new API-key. The API-key will be e-mailed to the given e-mail address.
        This function can also be used to reset the API-key for a previous registered e-mail address.
        A previous API-key will be invalidated.
        The function returns via the field __successful__ if the request successed.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GenerateAPIKeyRequest'
      responses:
        '200':
          description: |
            In case of normal behavior.
          schema:
            $ref: '#/definitions/ValidateResponse'
        '400':
          description: |
            In case of user error - thing of missing fields.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: |
            In case of system error. Please contact the helpdesk if this error persists.
          schema:
            $ref: '#/definitions/ErrorResponse'
                  
  /measureCollection:
    post:
      operationId: postMeasureCollection
      tags:
        - measures
      description: |
        Upload a new set of measures with a name.
      parameters:
        - name: apiKey
          in: query
          description: De API-key die is gebruikt bij andere opdrachten.
          required: true
          type: string
        - name: measure
          in: body
          required: true
          schema:
            $ref: '#/definitions/MeasureDataRequest'
      responses:
        '200':
          description: |
            In case of normal behavior.
          schema:
            $ref: '#/definitions/ValidateResponse'
        '400':
          description: |
            In case of user error - thing of missing fields.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: API key is missing or invalid
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: |
            In case of system error. Please contact the helpdesk if this error persists.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /getMeasureCollection:
    get:
      operationId: getMeasureCollection
      tags:
        - measures
      description: |
        Will return a list of measure that containts the calculation parameters for the measure for individual layers
      parameters:
        - name: apiKey
          in: query
          description: The API-key that can be used with other calls.
          required: true
          type: string
      responses:
        '200':
          description: |
            In case of normal behavior.
          schema:
            $ref: '#/definitions/MeasureCollectionsResponse'
        '400':
          description: |
            In case of user error - thing of missing fields.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: API key is missing or invalid
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: |
            In case of system error. Please contact the helpdesk if this error persists.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /deleteMeasureCollection:     
    delete:
      operationId: deleteMeasureCollection
      tags:
        - measures
      description: |
        Upload a new set of measures with a given name.
      parameters:
        - name: apiKey
          in: query
          description: The used API-key
          required: true
          type: string
        - name: measureKey
          in: query
          description: the measureKey to be removed
          required: true
          type: string          
      responses:
        '200':
          description: |
            In case of normal behavior.
          schema:
            $ref: '#/definitions/ValidateResponse'
        '400':
          description: |
            In case of user error - thing of missing fields.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: API key is missing or invalid
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: |
            In case of system error. Please contact the helpdesk if this error persists.
          schema:
            $ref: '#/definitions/ErrorResponse'  
 
  /modeldata/{model}:
    get:
      operationId: getModelData
      tags:
        - model
      description: |
        Will return a list of rasterlayers that are required for the model. Use air_regulation.
      parameters:
        - name: model
          in: path
          description: Eco system model name to fetch rasterlayers for.
          required: true
          type: string
      responses:
        '200':
          description: |
            In case of normal behavior.
          schema:
            $ref: '#/definitions/ModelDataResponse'
        '400':
          description: |
            In case of user error - thing of missing fields.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: |
            In case of system error. Please contact the helpdesk if this error persists.
          schema:
            $ref: '#/definitions/ErrorResponse'

securityDefinitions:
   apiKey:
     type: apiKey
     name: api_key
     in: query
definitions:    
  DataType:
    type: string
    description: |
      The data type of the layer data.
      Supported values are:
      ___GEOTIFF:___ ANK Classified GeoTIFF file.
      ___XYZ:___ ANK Classified XYZ file.
    default: XYZ
    enum:
      - GEOTIFF
      - XYZ
  ErrorResponse:
    type: object
    required:
      - code
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  GenerateAPIKeyRequest:
    type: object
    required:
      - email
    properties:
      email:
        type: string
        description: A valid e-mail address.
  LayerObject:
    type: object
    discriminator: non-existent
    required:
      - classType
      - dataType
      - data
    properties:
      classType:
        type: string
        description: |
          The type of class the layer data enclosed in the layer.
      dataType:
        $ref: '#/definitions/DataType'
      data:
        type: string
        format: byte
        description: |
          The layer data. This data must be base64 encoded for tiff and text file for xyz.
  ValidationMessage:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        description: Validation code.
      message:
        type: string
        description: Validation text.
  ValidateResponse:
    type: object
    discriminator: non-existent
    properties:
      successful:
        type: boolean
        description: true in case the call was successful.
      errors:
        type: array
        items:
          $ref: '#/definitions/ValidationMessage'
      warnings:
        type: array
        items:
          $ref: '#/definitions/ValidationMessage'         
  ModelDataResponse:
    type: object
    properties:
      name:
        type: string
        description: Name of the eco system service
      version:
        type: string
        description: Version number of the eco system service
      entries:
        type: array
        items:
          $ref: '#/definitions/Layer'
  Layer:
    type: string
    description: |
      Benodigde lagen voor het gekozen eco system service
    enum:
      - BGT_LAND_COVER
      - PM_10
      - POPULATION
      - TREES
      - SHRUBS
      - GRASS
      - MASK
      - CROP
      - TREE_HEIGHT
      - WINDFORCE
      - WATER
      - WETFOREST
      - PRODFOREST
      - GHG
      - GLG
      - GWT
      - SBU
      - LGN8
      - WOZINWONER
  AssessmentRequestResponse:
    allOf:
      - $ref: '#/definitions/ValidateResponse'
      - properties:
          key:
            type: string
            description: A unique id to identify this request.
          jobKey:
            type: string
            description: A unique key to rerun this model with speed performance  
          assessmentResults:
            type: array
            items:
              $ref: '#/definitions/AssessmentResultsResponse'   
  AssessmentResultsResponse:
    type: object
    properties:
      entries:
        type: array
        items:
          $ref: '#/definitions/AssessmentResultResponse'
      key:
        type: string
        description: A unique key for the geoserver results layers.      
  AssessmentResultResponse:
    type: object
    required:
      - code
    properties:
      code:
        type: integer
        format: int32
      name:
        type: string
      model:
        type: string  
      modelDescription:
        type: string
      min:
        type: number
        format: double
      max:
        type: number
        format: double
      sum:
        type: number
        format: double
      tablevalue:
        type: number
        format: double
      avg:
        type: number 
        format: double
      units:
        type: string
      class:
        type: string        
  MapLayers:
    type: object
    properties:
      layerFiles:
        type: array
        items:
          $ref: '#/definitions/LayerFile'
  LayerFile:
    type: object
    properties:
      code:
        type: string
      filename:
        type: string
      description:
        type: string     
  FeatureCollection:
    type: object
    properties:
      type:
        type: string
        enum:
        - FeatureCollection
      bbox:
        type: array
        items:
          type: number  
      features:
        type: array
        required: false
        items:
          $ref: '#/definitions/Features'
  Features:
    type: object 
    properties:
      id:
        type: string
      type:
        type: string
        enum:
        - Feature
      properties:
          $ref: '#/definitions/Properties'
      geometry:
          $ref: '#/definitions/Geometry'
  Properties:
    type: object
    properties:
      name:
        type: string
      measure:
          $ref: '#/definitions/MeasureType'
      measureId:
          type: number
      areaWidth:
        type: string
      areaRadius:
        type: string
      area:
        type: number
      isProjectArea:
        type: boolean
  MeasureCollectionsResponse:
    type: object
    properties:
      entries:
        type: array
        items:
          $ref: '#/definitions/MeasureResponse'     
  MeasureResponse:
    type: object
    properties:
      key:
        type: string
        description: Uniqu key
      name:
        type: string
        description: Name of the measure collection
      version:
        type: string
        description: Version number of the measure collection
      enabled:
        type: boolean
        description: If this measure can be used.
      entries:
        type: array
        items:
          $ref: '#/definitions/Measure'
  MeasureDataRequest:
    type: object
    properties:
      measureKey:
        type: string
        description: Unique singele name for the supplied measures
      name:
        type: string
        description: Name of the measure collection
      version:
        type: string
        description: Version number of the measure collection
      entries:
        type: array
        items:
          $ref: '#/definitions/Measure'
  MeasureType:
   type: string
   description: |
     Type of measurement
   enum:
      - PROJECT
      - STREETTREES
      - URBANWETLANDS
      - GREENROOFS
      - WADI
      - FOUNTAIN
      - DEEPINFILTRATION
      - DITCH
      - GREENFACADE
      - SURFACESTORAGE
      - DITSEWER
      - INFILTRATIONFIELDS
      - URBANFOREST
      - PERMEABLESURFACE
      - RAINBARREL
      - M32
      - M33
      - BLUEROOFS
      - WATERSQUARE
      - GREENBLUEROOFS
      - M45
      - SUBTERRAINSTORAGE
      - SMARTIRRIGATION
      - COOLSURFACES
      - RESERVOIR
      - SHADOW
      - EMBANKMENTS
      - GRAVELCASES
      - SMALL_EMBANKMENTS
      - DROUGHTVEG
      - M86
      - M87
      - M88
      - TEMP_EMBANKMENT
      - M90
      - SOFTENINGSURFACE
      - M92
      - M93
      - M94

  MeasureCollection:
    type: object
    properties:
      measures:
        type: array
        items:
          $ref: '#/definitions/Measure'
  Measure:
    type: object
    properties:
      id:
        type: number
      code:
        $ref: '#/definitions/MeasureType'
      description: 
        type: string
      runmodel:
        type: boolean
      layers:
        type: array
        items:
          $ref: '#/definitions/MeasureLayer'  
  MeasureLayer:
    type: object 
    properties:
      layer:
        $ref: '#/definitions/Layer'
      value:
        type: number
  MeasureLayerFile:
    type: object
    properties:
      measureType:
        $ref: '#/definitions/MeasureType'
      layer:
        $ref: '#/definitions/Layer'
      file:
        type: string
      measureLayerValue:
        type: number
  Geometry:
    type: object
    description: GeoJSon geometry
    required:
      - type
    properties:
      type:
        type: string
        enum:
        - Point
        - LineString
        - Polygon
        description: the geometry type only Point, LineString and Polygon supported
      coordinates:
        type: array
        items:
         type: object